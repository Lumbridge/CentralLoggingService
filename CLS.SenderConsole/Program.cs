using CLS.Core.Data;
using CLS.Core.StaticData;
using CLS.Infrastructure.Helpers;
using CLS.Sender.Classes;
using System;
using System.Threading;

namespace CLS.SenderConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var ls = new LogSender();
            var pSystem = ls.GetPublishingSystem("CLS Console Client", StaticData.EnvironmentType.DEV, StaticData.SystemType.ConsoleApplication);

            var logGeneratorThread = new Thread(RandomLogGenerator);
            logGeneratorThread.Start(new { ls, pSystem });

            Console.ReadKey();
        }

        public static void RandomLogGenerator(object args)
        {
            var ls = (LogSender)((dynamic)args).ls;
            var pSystem = (PublishingSystem)((dynamic)args).pSystem;
            var r = new Random(DateTime.Now.Ticks.GetHashCode());

            int debugCount = 0, infoCount = 0, warnCount = 0, errorCount = 0, fatalCount = 0;

            while (true)
            {
                var messageType = string.Empty;
                var randomNumber = r.Next(100);

                // 1. generate random message to send to CLSDb
                if (randomNumber <= 29) // 30% chance
                {
                    messageType = "Debug";
                    debugCount++;
                    if (r.Next(1, 2) == 1)
                        ls.LogDebugToDb(pSystem,
                            new Exception("This message was randomly generated by the CLS Sender Console."),
                            "This debug message was randomly generated by the CLS Sender Console.");
                    ls.LogDebugToDb(pSystem, null,
                        "This debug message was randomly generated by the CLS Sender Console.");
                }
                else if (randomNumber >= 30 && randomNumber <= 59) // 30% chance
                {
                    messageType = "Info";
                    infoCount++;
                    ls.LogInfoToDb(pSystem, "This info message was randomly generated by the CLS Sender Console.");
                }
                else if (randomNumber >= 60 && randomNumber <= 79) // 20% chance
                {
                    messageType = "Warn";
                    warnCount++;
                    if (r.Next(1, 2) == 1)
                        ls.LogWarningToDb(pSystem,
                            new Exception("This warning message was randomly generated by the CLS Sender Console."),
                            "This warning message was randomly generated by the CLS Sender Console.");
                    ls.LogWarningToDb(pSystem, null,
                        "This warning message was randomly generated by the CLS Sender Console.");
                }
                else if (randomNumber >= 80 && randomNumber <= 94) // 10% chance
                {
                    messageType = "Error";
                    errorCount++;
                    ls.LogErrorToDb(pSystem,
                        new Exception("This error message was randomly generated by the CLS Sender Console."));
                }
                else if (randomNumber >= 95) // 5% chance
                {
                    messageType = "Fatal";
                    fatalCount++;
                    ls.LogFatalToDb(pSystem,
                        new Exception("This fatal message was randomly generated by the CLS Sender Console."),
                        "This fatal message was randomly generated by the CLS Sender Console.");
                }

                var sleepTimeMs = r.Next(5000, 10000);
                ConsoleHelper.LogMessageToConsole($"Generated message with type: {messageType}, now sleeping for {sleepTimeMs}ms ({sleepTimeMs/1000} seconds).");
                Thread.Sleep(sleepTimeMs);
            }
        }
    }
}
